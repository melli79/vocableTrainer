// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "lect2-pskel.hxx"

/** Lect2_pskel
 */
void Lect2_pskel::
info_parser(Info_pskel* p) {
    this->info_parser_= p;
}

void Lect2_pskel::
voc_parser(Vocable_pskel* p) {
    this->voc_parser_= p;
}

void Lect2_pskel::
parsers(Info_pskel* info,
        Vocable_pskel* voc) {
    this->info_parser_= info;
    this->voc_parser_= voc;
}

Lect2_pskel::
Lect2_pskel ()
: info_parser_ (nullptr),
  voc_parser_ (nullptr) {
}


/** Info_pskel
 */
void Info_pskel::
title_parser(xml_schema::string_pskel* p) {
    this->title_parser_= p;
}

void Info_pskel::
author_parser(xml_schema::string_pskel* p) {
    this->author_parser_= p;
}

void Info_pskel::
mail_parser(xml_schema::string_pskel* p) {
    this->mail_parser_= p;
}

void Info_pskel::
description_parser(xml_schema::string_pskel* p) {
    this->description_parser_= p;
}

void Info_pskel::
parsers(xml_schema::string_pskel* title,
        xml_schema::string_pskel* author,
        xml_schema::string_pskel* mail,
        xml_schema::string_pskel* description) {
    this->title_parser_= title;
    this->author_parser_= author;
    this->mail_parser_= mail;
    this->description_parser_= description;
}

Info_pskel::Info_pskel ()
        : title_parser_ (nullptr),
          author_parser_ (nullptr),
          mail_parser_ (nullptr),
          description_parser_ (nullptr) {
}


/** Vocable_pskel
 */
void Vocable_pskel::
zh_parser(Zh_pskel* p) {
    this->zh_parser_= p;
}

void Vocable_pskel::
t_parser(xml_schema::string_pskel* p)
{
    this->t_parser_= p;
}

void Vocable_pskel::
en_parser(xml_schema::string_pskel *p) {
    this->en_parser_= p;
}

void Vocable_pskel::
parsers(Zh_pskel* zh,
        xml_schema::string_pskel* t,
        xml_schema::string_pskel* en) {
    this->zh_parser_= zh;
    this->t_parser_= t;
    this->en_parser_= en;
}

Vocable_pskel::Vocable_pskel ()
        : zh_parser_ (nullptr),
          t_parser_ (nullptr),
          en_parser_ (nullptr) {
}

/** Zh_pskel
 */

void Zh_pskel::
w_parser(xml_schema::string_pskel* p) {
    this->w_parser_= p;
}

void Zh_pskel::
r_parser(xml_schema::string_pskel* p) {
    this->r_parser_= p;
}

void Zh_pskel::
parsers(xml_schema::string_pskel* w,
        xml_schema::string_pskel* r) {
    this->w_parser_= w;
    this->r_parser_= r;
}

Zh_pskel::Zh_pskel ()
        : w_parser_ (nullptr),
          r_parser_ (nullptr) {
}

/** Lect2_pskel
 */
void Lect2_pskel::
setInfo(const Info&) {
}

void Lect2_pskel::
addVoc(const Vocable&) {
}

bool Lect2_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t) {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

    if (n == "info" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->info_parser_;

        if (this->info_parser_)
            this->info_parser_->pre ();

        return true;
    }

    if (n == "voc" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->voc_parser_;

        if (this->voc_parser_)
            this->voc_parser_->pre ();

        return true;
    }

    return false;
}

bool Lect2_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

    if (n == "info" && ns.empty ()) {
        if (this->info_parser_) {
            this->setInfo(
                    this->info_parser_->post_Info()
            );
        }

        return true;
    }

    if (n == "voc" && ns.empty ()) {
        if (this->voc_parser_) {
            this->addVoc(
                    this->voc_parser_->post_Vocable()
            );
        }

        return true;
    }

    return false;
}

/** Info_pskel
 */
void Info_pskel::
title(const QString&) {
}

void Info_pskel::
author(const QString&) {
}

void Info_pskel::
mail(const QString&) {
}

void Info_pskel::
description(const QString&) {
}

bool Info_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t) {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

    if (n == "title" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->title_parser_;

        if (this->title_parser_!= nullptr)
            this->title_parser_->pre ();

        return true;
    }

    if (n == "author" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->author_parser_;

        if (this->author_parser_!= nullptr)
            this->author_parser_->pre ();

        return true;
    }

    if (n == "mail" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->mail_parser_;

        if (this->mail_parser_!= nullptr)
            this->mail_parser_->pre ();

        return true;
    }

    if (n == "description" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

        if (this->description_parser_!= nullptr)
            this->description_parser_->pre ();

        return true;
    }

    return false;
}

bool Info_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

    if (n == "title" && ns.empty ()) {
        if (this->title_parser_!= nullptr)
            this->title (QString::fromStdString(this->title_parser_->post_string ()));

        return true;
    }

    if (n == "author" && ns.empty ()) {
        if (this->author_parser_!= nullptr)
            this->author (QString::fromStdString(this->author_parser_->post_string ()));

        return true;
    }

    if (n == "mail" && ns.empty ()) {
        if (this->mail_parser_!= nullptr)
            this->mail (QString::fromStdString(this->mail_parser_->post_string ()));

        return true;
    }

    if (n == "description" && ns.empty ()) {
        if (this->description_parser_!= nullptr)
            this->description (QString::fromStdString(this->description_parser_->post_string ()));

        return true;
    }

    return false;
}

/** Vocable_pskel
 */
void Vocable_pskel::
zh (const Zh&) {
}

void Vocable_pskel::
t(const QString &) {
}

void Vocable_pskel::
en(const QString &) {
}

bool Vocable_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t) {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

    if (n == "cn" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->zh_parser_;

        if (this->zh_parser_)
            this->zh_parser_->pre ();

        return true;
    }

    if (n == "t" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->t_parser_;

        if (this->t_parser_)
            this->t_parser_->pre ();

        return true;
    }

    if (n == "en" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->en_parser_;

        if (this->en_parser_)
            this->en_parser_->pre ();

        return true;
    }

    return false;
}

bool Vocable_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

    if (n == "cn" && ns.empty ()) {
        if (this->zh_parser_) {
            this->zh (
                  this->zh_parser_->post_Zh ()
            );
        }

        return true;
    }

    if (n == "t" && ns.empty ()) {
        if (this->t_parser_)
            this->t (QString::fromStdString(this->t_parser_->post_string ()));

        return true;
    }

    if (n == "en" && ns.empty ()) {
        if (this->en_parser_)
            this->en (QString::fromStdString(this->en_parser_->post_string ()));

        return true;
    }

    return false;
}

/** Zh_pskel
 */
void Zh_pskel::
w(const QString &) {
}

void Zh_pskel::
r(const QString &) {
}

bool Zh_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t) {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

    if (n == "w" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->w_parser_;

        if (this->w_parser_)
            this->w_parser_->pre ();

        return true;
    }

    if (n == "r" && ns.empty ()) {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->r_parser_;

        if (this->r_parser_)
            this->r_parser_->pre ();

        return true;
    }

    return false;
}

bool Zh_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n) {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

    if (n == "w" && ns.empty ()) {
        if (this->w_parser_)
            this->w (QString::fromStdString(this->w_parser_->post_string ()));

        return true;
    }

    if (n == "r" && ns.empty ()) {
        if (this->r_parser_)
            this->r (QString::fromStdString(this->r_parser_->post_string ()));

        return true;
    }

    return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.
